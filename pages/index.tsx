import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useReducer, useState } from 'react'


// const initialState:TodoState=[{
//   text:'kkk',
//   createdAt: new Date()
// }];

interface TodoState {
  text: string;
  id: Date;
  toggled: boolean;
}


const reducer=(todos:TodoState[], action:any)=>{
    switch(action.type){
      case "ADD":
        return [...todos, action.payload];
      case "DELETE":
        return todos.filter(todo=> todo.id!==action.payload.id);
      case "TOGGLE":
          return todos.map(todo=>{
            if(todo.id===action.payload.id){
              return {...todo, toggled:!todo.toggled}
            }
            return todo;
          })
      default:
        return todos;
    }
}

const Home: NextPage = () => {

  const [text, setText] = useState('')
  const [error, setError] = useState(false)
  const [todos, dispatch]=useReducer(reducer, [] )


  const handleChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
    setError(false);
    setText(e.currentTarget.value);
  }

  const Submit=(e:React.MouseEvent<HTMLElement>)=>{

    if(text!==""){
      console.log("clicked")
      dispatch({type:"ADD", payload:{text: text, id: new Date(), toggled: false}})
      setText("");
    }
    else{
      setError(true)
    }

  }

  return (
    <div className='w-100 h-screen bg-blue-100 flex flex-col justify-center items-center'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>

      <h1 className='text-lg font-semibold text-white'>

        NEXT TypeScript Todo app

      </h1>

      <div className='md:w-1/2 w-4/5 h-3/4 rounded-lg bg-blue-200 flex flex-col items-center p-4'>

        <div className='w-full flex flex-col justify-center items-center'>
            <input type='text' value={text} onChange={handleChange} autoComplete='off' maxLength={30} 
            className='w-full placeholder:text-gray-200 placeholder:italic px-2 rounded-lg focus:outline-none' 
            placeholder='what to do?'/>

            <h6 className='text-xs text-blue-100'>{text.length}/30</h6>
            <button type='button' onClick={Submit} className='bg-blue-400 rounded-md text-white px-2 p-1 m-2'>Add to the list</button>
            {error?<h5 className='text-xs text-center text-red-400'>Try type something and then hit ADD button</h5>:null}
        </div>
          {todos.length!==0?<h1 className='text-white text-center text-xl m-6'>My tasks: </h1>:<h1 className='text-xl text-white text-center'>NO TASK TO DO</h1>}
        <div className='overflow-y-scroll w-full h-5/6 tasks'>
          {
              todos.sort((a, b) => a.id > b.id ? -1:1).map((todo:TodoState)=>{
                const Delete=(e:React.MouseEvent<HTMLElement>)=>{
                  dispatch({type:"DELETE", payload:{id: todo.id}})
                }
                const Toggle=(e:React.MouseEvent<HTMLElement>)=>{
                  dispatch({type:"TOGGLE", payload:{id: todo.id}})
                }
                return(

                    <div key={todo.text} className="flex flex-col justify-center items-center m-4">
                      <h2 className={`bg-blue-300 ${todo.toggled?"text-gray-700 line-through":"text-white font-semibold"} px-2 p-1 my-1 rounded-md`}>

                        {todo.text}

                      </h2>
                      <div className='flex flex-row justify-between items-center w-40'>

                        <button type="submit" onClick={Toggle} className="rounded-md  text-xs bg-green-500 px-4 p-1 text-white">Toggle</button>
                        <button type="submit" onClick={Delete} className="rounded-md text-xs bg-red-500 px-4 p-1 text-white">DELETE</button>

                      </div>

                    </div>
                )
              }
              )
          }
        </div>

      </div>

    
    </div>
  )
}

export default Home
